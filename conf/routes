# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~

# An example controller showing a sample home page
GET           /                                       controllers.HomeController.index
GET           /api/geostreams/*page                   controllers.HomeController.oldApi(page)

# Sensors
GET           /api/sensors/:id                        controllers.SensorController.sensorGet(id: Int)
POST          /api/sensors                            controllers.SensorController.sensorCreate
GET           /api/sensors/update                     controllers.SensorController.updateStatisticsStreamSensor()
PUT           /api/sensors/:id                        controllers.SensorController.updateSensorMetadata(id: Int)
GET           /api/sensors/:id/stats                  controllers.SensorController.getSensorStatistics(id: Int)
GET           /api/sensors/:id/streams                controllers.SensorController.getSensorStreams(id: Int)
GET           /api/sensors/:id/update                 controllers.SensorController.updateStatisticsSensor(id: Int)
GET           /api/sensors                            controllers.SensorController.searchSensors(geocode: Option[String] ?= None, sensor_name: Option[String] ?= None)
DELETE        /api/sensors/:id                        controllers.SensorController.deleteSensor(id: Int)

# Streams
POST          /api/streams                            controllers.StreamController.createStream
GET           /api/streams/update                     controllers.StreamController.updateStatisticsStreamSensor()
GET           /api/streams/:id                        controllers.StreamController.getStream(id: Int)
PUT           /api/streams/:id                        controllers.StreamController.patchStreamMetadata(id: Int)
GET           /api/streams/:id/update                 controllers.StreamController.updateStatisticsStream(id: Int)
GET           /api/streams                            controllers.StreamController.searchStreams(geocode: Option[String] ?= None, stream_name: Option[String] ?= None)
DELETE        /api/streams/:id                        controllers.StreamController.deleteStream(id: Int)

# Datapoints
POST          /api/datapoints                         controllers.DatapointController.addDatapoint(invalidateCache: Boolean ?= true)
DELETE        /api/datapoints/:id                     controllers.DatapointController.deleteDatapoint(id: Int)
GET           /api/datapoints                         controllers.DatapointController.searchDatapoints(operator = "", since: Option[String] ?= None, until: Option[String] ?= None, geocode: Option[String] ?= None,  stream_id: Option[String] ?= None, sensor_id: Option[String] ?= None, sources: List[String] ?= List.empty, attributes: List[String] ?= List.empty, format: String ?= "json", semi: Option[String], onlyCount: Boolean ?=false)
GET           /api/datapoints/averages                controllers.DatapointController.searchDatapoints(operator = "averages", since: Option[String] ?= None, until: Option[String] ?= None, geocode: Option[String] ?= None,  stream_id: Option[String] ?= None, sensor_id: Option[String] ?= None, sources: List[String] ?= List.empty, attributes: List[String] ?= List.empty, format: String ?= "json", semi: Option[String], onlyCount: Boolean ?=false)
GET           /api/datapoints/trends                  controllers.DatapointController.searchDatapoints(operator = "trends", since: Option[String] ?= None, until: Option[String] ?= None, geocode: Option[String] ?= None,  stream_id: Option[String] ?= None, sensor_id: Option[String] ?= None, sources: List[String] ?= List.empty, attributes: List[String] ?= List.empty, format: String ?= "json", semi: Option[String], onlyCount: Boolean ?=false)
GET           /api/datapoints/bin/:time/:depth        controllers.DatapointController.binDatapoints(time, depth: Double, raw: Boolean ?= false, since: Option[String] ?= None, until: Option[String] ?= None, geocode: Option[String] ?= None,  stream_id: Option[String] ?= None, sensor_id: Option[String] ?= None, sources: List[String] ?= List.empty, attributes: List[String] ?= List.empty)
GET           /api/datapoints/:id                     controllers.DatapointController.getDatapoint(id: Int)
GET           /api/datapoints/trendsRegion/:attribute       controllers.DatapointController.trendsByRegion(attribute: String)

# Cache
GET           /api/cache                              controllers.CacheController.cacheListAction
GET           /api/cache/invalidate                   controllers.CacheController.cacheInvalidateAction(sensor_id: Option[String] ?= None, stream_id: Option[String] ?= None)
GET           /api/cache/:id                          controllers.CacheController.cacheFetchAction(id)

# Admin
DELETE        /api/dropall                            controllers.AdminController.deleteAll
GET           /api/counts                             controllers.AdminController.counts
GET           /api/config                             controllers.AdminController.getConfig

# Testing postgres connection
GET           /postgresql                             controllers.DBController.index

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                           controllers.Assets.versioned(path="/public", file: Asset)

# Examples
GET           /user                                   controllers.UserController.userGet
POST          /user                                   controllers.UserController.userPost
PUT           /sensor                                 controllers.SensorController.sensorFormPost
GET           /sensor                                 controllers.SensorController.sensorFormGet