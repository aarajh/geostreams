# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~

# An example controller showing a sample home page
GET           /                                                         controllers.HomeController.index
GET           /api/geostreams/*page                                     controllers.HomeController.oldApi(page)
GET           /javascriptRoutes                                         controllers.HomeController.javascriptRoutes
GET           /datapoints/download                                      controllers.HomeController.datapointDownload(since: Option[String] ?= None, until: Option[String] ?= None, geocode: Option[String] ?= None, sources: List[String] ?= List.empty, attributes: List[String] ?= List.empty, sensor_id: Option[String] ?= None)
GET           /datapoints/DownloadCSV                                   controllers.HomeController.datapointDownloadCSV(since: Option[String] ?= None, until: Option[String] ?= None, geocode: Option[String] ?= None, sources: List[String] ?= List.empty, attributes: List[String] ?= List.empty, sensor_id: Option[String] ?= None, purpose: String)


# Authentication pages
GET		      /signup									                controllers.Auth.startSignUp
POST	      /signup									                controllers.Auth.handleStartSignUp
GET		      /signup/:token					                        controllers.Auth.signUp(token: String)
GET		      /signin									                controllers.Auth.signIn(fromURL:Option[String] ?= None)
POST	      /authenticate					   	                        controllers.Auth.authenticate
GET		      /signout								                    controllers.Auth.signOut
GET		      /reset-password					                        controllers.Auth.forgotPassword
POST	      /reset-password					                        controllers.Auth.handleForgotPassword
GET		      /reset-password/:token	                                controllers.Auth.resetPassword(token: String)
POST	      /reset-password/:token	                                controllers.Auth.handleResetPassword(token: String)
GET		      /change-password				                            controllers.Auth.changePassword
POST	      /change-password				                            controllers.Auth.handleChangePassword
GET  	      /manage-users				                                controllers.HomeController.manageUser
POST  	      /manage-users				                                controllers.HomeController.changeMaster(email: String, enable: Boolean)
GET  	      /events   				                                controllers.HomeController.listEvents()

# Sensors
GET           /api/sensors/:id                                          controllers.SensorController.sensorGet(id: Int)
POST          /api/sensors                                              controllers.SensorController.sensorCreate
PUT           /api/sensors/update                                       controllers.SensorController.sensorUpdateStatisticsStream()
PUT           /api/sensors/:id                                          controllers.SensorController.sensorUpdateMetadata(id: Int)
GET           /api/sensors/:id/stats                                    controllers.SensorController.sensorGetStatistics(id: Int)
GET           /api/sensors/:id/streams                                  controllers.SensorController.sensorGetStreams(id: Int)
PUT           /api/sensors/:id/update                                   controllers.SensorController.sensorUpdateStatistics(id: Int)
GET           /api/sensors                                              controllers.SensorController.sensorsSearch(geocode: Option[String] ?= None, sensor_name: Option[String] ?= None)
DELETE        /api/sensors/:id                                          controllers.SensorController.sensorDelete(id: Int)

# Streams
POST          /api/streams                                              controllers.StreamController.streamCreate
PUT           /api/streams/update                                       controllers.StreamController.streamUpdateStatisticsSensor()
GET           /api/streams/:id                                          controllers.StreamController.streamGet(id: Int)
PUT           /api/streams/:id                                          controllers.StreamController.streamPatchMetadata(id: Int)
GET           /api/streams/:id/update                                   controllers.StreamController.streamUpdateStatistics(id: Int)
GET           /api/streams                                              controllers.StreamController.streamsSearch(geocode: Option[String] ?= None, stream_name: Option[String] ?= None)
DELETE        /api/streams/:id                                          controllers.StreamController.streamDelete(id: Int)
DELETE        /api/streams                                              controllers.StreamController.streamDeleteRange(start: Int, end: Int)

# Datapoints
POST          /api/datapoints                                           controllers.DatapointController.datapointCreate(invalidateCache: Boolean ?= true)
POST          /api/datapoints/bulk                                      controllers.DatapointController.datapointsCreate(invalidateCache: Boolean ?= true)
DELETE        /api/datapoints/:id                                       controllers.DatapointController.datapointDelete(id: Int)
PUT           /api/datapoints/renameParam/:oldParam/:newParam           controllers.DatapointController.renameParam(oldParam: String, newParam: String, source: Option[String] ?= None, region: Option[String] ?= None)
GET           /api/datapoints/averages                                  controllers.DatapointController.datapointAverage(since: Option[String] ?= None, until: Option[String] ?= None, geocode: Option[String] ?= None,  stream_id: Option[String] ?= None, sensor_id: Option[String] ?= None, sources: List[String] ?= List.empty, attributes: List[String] ?= List.empty, format: String ?= "json", semi: Option[String], onlyCount: Boolean ?=false)
GET           /api/datapoints/trends                                    controllers.DatapointController.datapointTrends(since: Option[String] ?= None, until: Option[String] ?= None, geocode: Option[String] ?= None,  stream_id: Option[String] ?= None, sensor_id: Option[String] ?= None, sources: List[String] ?= List.empty, attributes: List[String] ?= List.empty, format: String ?= "json", semi: Option[String], onlyCount: Boolean ?=false)
GET           /api/datapoints/bin/:time/:depth                          controllers.DatapointController.datapointsBin(time, depth: Double, raw: Boolean ?= false, since: Option[String] ?= None, until: Option[String] ?= None, geocode: Option[String] ?= None,  stream_id: Option[String] ?= None, sensor_id: Option[String] ?= None, sources: List[String] ?= List.empty, attributes: List[String] ?= List.empty)
GET           /api/datapoints/:id                                       controllers.DatapointController.datapointGet(id: Int)
GET           /api/datapoints                                           controllers.DatapointController.datapointSearch(since: Option[String] ?= None, until: Option[String] ?= None, geocode: Option[String] ?= None,  stream_id: Option[String] ?= None, sensor_id: Option[String] ?= None, sources: List[String] ?= List.empty, attributes: List[String] ?= List.empty, format: String ?= "json", semi: Option[String], onlyCount: Boolean ?=false)
GET           /api/datapoints                                           controllers.DatapointController.datapointSearch(since: Option[String] ?= None, until: Option[String] ?= None, geocode: Option[String] ?= None,  stream_id: Option[String] ?= None, sensor_id: Option[String] ?= None, sources: List[String] ?= List.empty, attributes: List[String] ?= List.empty, format: String ?= "json", semi: Option[String], onlyCount: Boolean ?=false)
GET           /api/trends/region/detail/:attribute                      controllers.DatapointController.trendsByRegionDetail(attribute: String, geocode: String, season: String ?= "spring")

POST          /api/trends/region                                        controllers.CacheController.calculateTrendsByRegion()
GET           /api/trends/region/:attribute                             controllers.CacheController.regionTrends(attribute: String, season: String ?= "spring")

# Parameters
GET           /api/parameters                                           controllers.ParameterController.getParameters
POST          /api/parameters                                           controllers.ParameterController.addParameter
DELETE        /api/parameters/name/:name                                controllers.ParameterController.deleteParameterByName(name: String)
DELETE        /api/parameters/:id                                       controllers.ParameterController.deleteParameter(id: Int)

# Cache
POST          /api/cache                                                controllers.CacheController.calculateBins(sensor_id: Option[Int] ?= None, since: Option[String], until: Option[String], parameter: Option[String] ?= None)
POST          /api/cache/season                                         controllers.CacheController.calculateBinsBySeason(sensor_id: Option[Int] ?= None, since: Option[String], until: Option[String], parameter: List[String] ?= None)
GET           /api/cache/year/:sensor_id                                controllers.CacheController.getCachedBinStatsYear(sensor_id: Int, since: Option[String], until: Option[String], updateBins: Boolean ?= false, parameter: Option[String] ?= None)
GET           /api/cache/month/:sensor_id                               controllers.CacheController.getCachedBinStatsMonth(sensor_id: Int, since: Option[String], until: Option[String], updateBins: Boolean ?= false, parameter: Option[String] ?= None)
GET           /api/cache/day/:sensor_id                                 controllers.CacheController.getCachedBinStatsDay(sensor_id: Int, since: Option[String], until: Option[String], updateBins: Boolean ?= false, parameter: Option[String] ?= None)
GET           /api/cache/hour/:sensor_id                                controllers.CacheController.getCachedBinStatsHour(sensor_id: Int, since: Option[String], until: Option[String], updateBins: Boolean ?= false, parameter: Option[String] ?= None)
GET           /api/cache/season/:sensor_id                              controllers.CacheController.getCachedBinStatsSeason(sensor_id: Int, since: Option[String], until: Option[String], updateBins: Boolean ?= false, parameter: Option[String] ?= None, season: Option[String] ?= None)
GET           /api/cache/trends/year/:sensor_id                         controllers.CacheController.getTrendsForParameterYear(sensor_id: Int, since: Option[String], until: Option[String], parameter: Option[String])
GET           /api/cache/trends/month/:sensor_id                        controllers.CacheController.getTrendsForParameterMonth(sensor_id: Int, since: Option[String], until: Option[String], parameter: Option[String])
GET           /api/cache/trends                                         controllers.CacheController.getTrendsForParameter(parameter: String, season: Option[String], source: Option[String])
GET           /api/cache/analysis                                       controllers.CacheController.getExploratoryTrends(parameter: String, rolling_years: Int, baseline_years: Int, sensor_id: List[Int])

# Admin
DELETE        /api/dropall                                              controllers.AdminController.deleteAll
GET           /api/counts                                               controllers.AdminController.counts(sensor_id: Option[Int]?= None)
GET           /api/config                                               controllers.AdminController.getConfig

# Testing postgres connection
GET           /postgresql                                               controllers.DBController.index

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                             controllers.Assets.versioned(path="/public", file: Asset)

# Examples
POST	      /api/authenticate					   	                    controllers.UserController.tokenAuthenticate
PUT           /sensor                                                   controllers.SensorController.sensorFormPost
GET           /sensor                                                   controllers.SensorController.sensorFormGet

# Map static resources from the /public folder to the /assets URL path
GET		      /public/*file						                        controllers.MyAssets.public(path="/public", file: Asset)
GET		      /lib/*file							                    controllers.MyAssets.lib(path="/public/lib", file: Asset)
GET		      /css/*file							                    controllers.MyAssets.css(path="/public/stylesheets", file: Asset)
GET		      /js/*file								                    controllers.MyAssets.js(path="/public/javascripts", file: Asset)
GET		      /img/*file							                    controllers.MyAssets.img(path="/public/images", file: Asset)
GET		      /common/css/*file						                    controllers.MyAssets.commonCss(path="/public/lib/common/stylesheets", file: Asset)
GET		      /common/js/*file						                    controllers.MyAssets.commonJs(path="/public/lib/common/javascripts", file: Asset)
GET		      /common/img/*file						                    controllers.MyAssets.commonImg(path="/public/lib/common/images", file: Asset)